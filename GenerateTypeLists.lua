#!/usr/bin/env lua
TypelistType = "set"
               TypelistSearchPredicate = "has_key"

MathTypes = {
	Vec = {
		{2, "b"};
		{2, "d"};
		{2, "f"};
		{2, "s"};
		{3, "b"};
		{3, "d"};
		{3, "f"};
		{3, "s"};
		{4, "b"};
		{4, "d"};
		{4, "f"};
		{4, "s"};
		{4, "ub"};
	};
	Matrix = {
		"d";
		"f";
	};
	Quat = {
		"Quat";
	}
}

makeTypename = {
	Vec = function(t)
	return ("Vec%d%s"): format(t[1], t[2])
		end;

	Matrix = function(t)
	return ("Matrix%s"): format(t)
		end;

	Quat = function()
	return "Quat"
	end
}

makeTypenameQualifier = function(f)
                        return function(v)
                               return "::osg::" .. f(v)
                                      end
                                      end

description = {
	Vec = "vector";
	Matrix = "matrix";
	Quat = "quat";
}

map = function(s, f)
      local ret = {}
                  for _, v in ipairs(s) do
		                  table.insert(ret, f(v))
		                  end
		                  return ret
		                         end

		                         printIncludes = function()
		                                 print(("#include <boost/mpl/%s.hpp>"): format(TypelistType))
			                                 --print "#include <boost/mpl/contains.hpp>"
			                                 print "#include <boost/mpl/bool.hpp>"

			                                 for shortname, desc in pairs(description) do
					                                 for _, specificType in ipairs(MathTypes[shortname]) do
							                                 print(("#include <osg/%s>"): format(makeTypename[shortname](specificType)))
							                                 end
							                                 end
							                                 end

							                                 printTypelists = function()
							                                         for shortname, desc in pairs(description) do
									                                         local typelist = table.concat(map(MathTypes[shortname], makeTypenameQualifier(makeTypename[shortname])), ", ")
									                                                 print(("	struct %s_types : boost::mpl::%s< %s > {};"): format(desc, TypelistType, typelist))
									                                                 end
									                                                 print("")
									                                                 end

									                                                 printPredicateMetafunctions = function()
									                                                         for shortname, desc in pairs(description) do
											                                                         print(("	template<typename T> struct is_%s : boost::mpl::%s<%s_types, T> {"): format(desc, TypelistSearchPredicate, desc))
											                                                         print(("		typedef is_%s<T> type;"): format(desc))
											                                                         print(("	};"))
											                                                         print("")
											                                                         end
											                                                         end


											                                                         print [[
									                                                                 /** @file
									                                                                 	@brief Header GENERATED BY GenerateTypeLists.lua - Do not edit by hand!

									                                                                 	@date 2012

									                                                                 	@author
									                                                                 	Ryan Pavlik
									                                                                 	<rpavlik@iastate.edu> and <abiryan@ryand.net>
									                                                                 	http://academic.cleardefinition.com/
									                                                                 	Iowa State University Virtual Reality Applications Center
									                                                                 	Human-Computer Interaction Graduate Program
									                                                                 */

//          Copyright Iowa State University 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#ifndef INCLUDED_TypeLists_h_GUID_4411cfff_4327_470f_b845_5949c8b2a8d6
#define INCLUDED_TypeLists_h_GUID_4411cfff_4327_470f_b845_5949c8b2a8d6

// Internal Includes
// - none

// Library/third-party includes
											                                                                 ]]
											                                                         printIncludes()
											                                                         print [[

// Standard includes
// - none

											namespace osgTraits {
										                                                                 ]]
										printTypelists()
										printPredicateMetafunctions()
										print [[
									} // end of namespace osgTraits


#endif // INCLUDED_TypeLists_h_GUID_4411cfff_4327_470f_b845_5949c8b2a8d6
]]
